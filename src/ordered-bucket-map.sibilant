
(def-curried search  (value array) (.find array (=> (v) (= v value))))

(def identity (a) a)

(def search-if-given ( array value)
  (conditional array

               (-> (defined? value)) (search value)

               identity))

(def fprint ($value (dots args))
  (console.log $value (dots args))
  $value)

(def-interface Ordered-bucket-map ((*buckets ((create Ordered-map))))

  (def-generic set (k v *buckets )

    (print "setting" k v)

    ;; This is breaking if a duplicate entry is attempted to be added from Bucket-tree

    (if (.has *buckets k)

        (pipe *buckets (.get  k) (fprint "bucket at" k)(.push v))

        ;; changing `v` to an array fixed the first problem but introduced a new one,
        ;; now the operations on the tree expect the elements of the child to contain valid sub trees

        (.push *buckets [k [v]])))

  (def-generic get (k value *buckets)
    (.get *buckets k))

  (def-generic each (f *buckets)
    (.each *buckets f))
  (def-generic map (f *buckets)
    (.map *buckets f))
  (def-generic delete ([k value]))

  )
(export Ordered-bucket-map)
